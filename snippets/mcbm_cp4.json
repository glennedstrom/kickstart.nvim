{
  "Maximum Cardinality Bipartite Matching": {
    "prefix": "mcbm",
    "body": [
      "typedef vector<int> vi;",
      "",
      "vi match, vis;",
      "vector<vi> AL;",
      "",
      "int Aug(int L) {",
      "  if (vis[L]) return 0;",
      "  vis[L] = 1;",
      "  for (auto &R : AL[L])",
      "    if ((match[R] == -1) || Aug(match[R])) {",
      "      match[R] = L;",
      "      return 1;",
      "    }",
      "  return 0;",
      "}",
      "",
      "int MCBM(int V, int Vleft) {",
      "  match.assign(V, -1);",
      "  int result = 0;",
      "  ",
      "  // Greedy preprocessing for trivial augmenting paths",
      "  unordered_set<int> freeV;",
      "  for (int L = 0; L < Vleft; ++L)",
      "    freeV.insert(L);",
      "  ",
      "  for (int L = 0; L < Vleft; ++L) {",
      "    vi candidates;",
      "    for (auto &R : AL[L])",
      "      if (match[R] == -1)",
      "        candidates.push_back(R);",
      "    if ((int)candidates.size() > 0) {",
      "      ++result;",
      "      freeV.erase(L);",
      "      int a = rand() % (int)candidates.size();",
      "      match[candidates[a]] = L;",
      "    }",
      "  }",
      "  ",
      "  // Try to match remaining free vertices",
      "  for (auto &f : freeV) {",
      "    vis.assign(Vleft, 0);",
      "    result += Aug(f);",
      "  }",
      "  ",
      "  return result;",
      "}"
    ],
    "description": "Maximum Cardinality Bipartite Matching using augmenting paths algorithm",
    "scope": "cpp"
  }
}
