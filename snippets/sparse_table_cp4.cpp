{
  "Sparse Table": {
    "prefix": "sparsetable",
    "body": [
      "typedef vector<int> vi;",
      "",
      "class SparseTable {",
      "private:",
      "  vi A, P2, L2;",
      "  vector<vi> SpT;",
      "public:",
      "  SparseTable() {}",
      "",
      "  SparseTable(vi &initialA) {",
      "    A = initialA;",
      "    int n = (int)A.size();",
      "    int L2_n = (int)log2(n)+1;",
      "    P2.assign(L2_n+1, 0);",
      "    L2.assign((1<<L2_n)+1, 0);",
      "    for (int i = 0; i <= L2_n; ++i) {",
      "      P2[i] = (1<<i);",
      "      L2[(1<<i)] = i;",
      "    }",
      "    for (int i = 2; i < P2[L2_n]; ++i)",
      "      if (L2[i] == 0)",
      "        L2[i] = L2[i-1];",
      "    ",
      "    SpT = vector<vi>(L2[n]+1, vi(n));",
      "    for (int j = 0; j < n; ++j)",
      "      SpT[0][j] = j;",
      "    ",
      "    for (int i = 1; P2[i] <= n; ++i)",
      "      for (int j = 0; j+P2[i]-1 < n; ++j) {",
      "        int x = SpT[i-1][j];",
      "        int y = SpT[i-1][j+P2[i-1]];",
      "        SpT[i][j] = A[x] <= A[y] ? x : y;",
      "      }",
      "  }",
      "",
      "  int RMQ(int i, int j) {",
      "    int k = L2[j-i+1];",
      "    int x = SpT[k][i];",
      "    int y = SpT[k][j-P2[k]+1];",
      "    return A[x] <= A[y] ? x : y;",
      "  }",
      "};"
    ],
    "description": "Sparse Table for Range Minimum Query in O(1) after O(n log n) preprocessing",
    "scope": "cpp"
  }
}
